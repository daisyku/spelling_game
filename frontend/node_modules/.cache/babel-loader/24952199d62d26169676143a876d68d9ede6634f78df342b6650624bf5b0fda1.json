{"ast":null,"code":"var _jsxFileName = \"/Users/lauren/Desktop/spell_game/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// Filename - App.js\n\n// Importing modules\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction scoring(word) {\n  if (word.length == 4) {\n    return 1;\n  }\n  return word.length;\n}\nfunction App() {\n  _s();\n  const [letters, setLetters] = useState([]); // State to store the letters\n  const [correctInputs, setCorrectInputs] = useState([]); // State to store the correct inputs\n  const [lst, setLst] = useState([]); // State to store the special inputs\n  const [userInput, setUserInput] = useState(''); // State to store the user's input\n  const [alreadyGuessed, setAlreadyGuessed] = useState([]); // State to store the already guessed words\n  const [points, setPoints] = useState(0); // State to store the points\n  const [special_letter, setSpecialLetter] = useState('');\n  const fetchGameState = () => {\n    fetch('/game_state').then(response => response.json()).then(data => {\n      setLetters(data.letters);\n      setCorrectInputs(data.correct_inputs);\n      setLst(data.lst);\n      setSpecialLetter(data.special_letter);\n      setUserInput('');\n      console.log('Special letter: ', data.special_letter);\n      console.log('pangrams: ', data.lst);\n    });\n    setPoints(0);\n    setAlreadyGuessed([]);\n  };\n  useEffect(() => {\n    const handleKeyDown = event => {\n      const key = event.key.toLowerCase();\n      if (letters.includes(key)) {\n        console.log(`User pressed a special key: ${key}`);\n        setUserInput(userInput + key);\n        // Here you can add the logic to record the key press\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []); // Empty dependency array means this effect runs once on mount and cleanup on unmount\n\n  // Fetch the letters from the server when the component mounts\n  useEffect(() => {\n    fetchGameState();\n  }, []);\n  const handleButtonClick = letter => {\n    setUserInput(userInput + letter);\n    const newUserInput = userInput + letter;\n    //console.log('userintput is:', newUserInput);\n    setUserInput(newUserInput);\n  };\n\n  // Function to handle delete button click\n  const handleDeleteClick = () => {\n    setUserInput(userInput.slice(0, -1));\n  };\n  const handleGuessSubmission = () => {\n    console.log('handling guess: ', userInput);\n    console.log('already guessed is: ', alreadyGuessed);\n    if (correctInputs.includes(userInput) && userInput.includes(special_letter)) {\n      if (alreadyGuessed.includes(userInput)) {\n        alert(\"Already Guessed\");\n      } else if (lst.includes(userInput)) {\n        alert(\"its a pangram!!!\");\n        var current = scoring(userInput);\n        setPoints(points + current);\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n      } else {\n        alert(\"Great!\");\n        current = scoring(userInput);\n        setPoints(points + current);\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n      }\n    } else {\n      alert(\"Not a valid word!\");\n    }\n    setUserInput('');\n    // Update the state variable with the new guess\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Spelling Bee!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(letters[0]),\n        children: letters[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(letters[1]),\n        children: letters[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(letters[2]),\n        children: letters[2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(letters[3]),\n        children: letters[3]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(letters[4]),\n        children: letters[4]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(letters[5]),\n        children: letters[5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(letters[6]),\n        children: letters[6]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchGameState,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteClick,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuessSubmission,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Points: \", points]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Already Guessed: \", alreadyGuessed.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"2kuCE4tRaQxKBMnnz3GLLIVN1sg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","scoring","word","length","App","_s","letters","setLetters","correctInputs","setCorrectInputs","lst","setLst","userInput","setUserInput","alreadyGuessed","setAlreadyGuessed","points","setPoints","special_letter","setSpecialLetter","fetchGameState","fetch","then","response","json","data","correct_inputs","console","log","handleKeyDown","event","key","toLowerCase","includes","window","addEventListener","removeEventListener","handleButtonClick","letter","newUserInput","handleDeleteClick","slice","handleGuessSubmission","alert","current","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","join","_c","$RefreshReg$"],"sources":["/Users/lauren/Desktop/spell_game/frontend/src/App.js"],"sourcesContent":["// Filename - App.js\n\n// Importing modules\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction scoring(word) {\n  if (word.length == 4 ) {\n    return 1\n  }\n  return word.length\n}\n\nfunction App() {\n\n\n  const [letters, setLetters] = useState([]); // State to store the letters\n  const [correctInputs, setCorrectInputs] = useState([]); // State to store the correct inputs\n  const [lst, setLst] = useState([]); // State to store the special inputs\n  const [userInput, setUserInput] = useState(''); // State to store the user's input\n  const [alreadyGuessed, setAlreadyGuessed] = useState([]); // State to store the already guessed words\n  const [points, setPoints] = useState(0); // State to store the points\n  const [special_letter, setSpecialLetter] = useState('')\n  \n  const fetchGameState = () => {\n    fetch('/game_state')\n      .then(response => response.json())\n      .then(data => {\n        setLetters(data.letters);\n        setCorrectInputs(data.correct_inputs);\n        setLst(data.lst);\n        setSpecialLetter(data.special_letter)\n        setUserInput('')\n        console.log('Special letter: ', data.special_letter);\n        console.log('pangrams: ', data.lst);\n\n      });\n    setPoints(0)\n    setAlreadyGuessed([])\n  };\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      const key = event.key.toLowerCase();\n      if (letters.includes(key)) {\n        console.log(`User pressed a special key: ${key}`);\n        setUserInput(userInput + key)\n        // Here you can add the logic to record the key press\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n  // Cleanup function to remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []); // Empty dependency array means this effect runs once on mount and cleanup on unmount\n\n\n  // Fetch the letters from the server when the component mounts\n  useEffect(() => {\n    fetchGameState();\n  }, []);\n\n  const handleButtonClick = (letter) => {\n    setUserInput(userInput + letter)\n    const newUserInput = userInput + letter;\n    //console.log('userintput is:', newUserInput);\n    setUserInput(newUserInput);\n  };\n\n  // Function to handle delete button click\n  const handleDeleteClick = () => {\n    setUserInput(userInput.slice(0, -1));\n  };\n\n  const handleGuessSubmission = () => {\n    console.log('handling guess: ', userInput)\n    console.log('already guessed is: ', alreadyGuessed)\n    if (correctInputs.includes(userInput) &&  userInput.includes(special_letter) ) {\n      if (alreadyGuessed.includes(userInput) ) {\n        alert(\"Already Guessed\");\n      } else if (lst.includes(userInput)){\n        alert(\"its a pangram!!!\");\n        var current = scoring(userInput)\n        setPoints(points+current)\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n      }\n      else {\n        alert(\"Great!\");\n        current = scoring(userInput)\n        setPoints(points+current)\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n      }\n    } else {\n      alert(\"Not a valid word!\");\n    }\n    setUserInput('');\n    // Update the state variable with the new guess\n  };\n\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>Spelling Bee!!</h1>\n        \n        <button onClick={() => handleButtonClick(letters[0])}>{letters[0]}</button>\n        <button onClick={() => handleButtonClick(letters[1])}>{letters[1]}</button>\n        <button onClick={() => handleButtonClick(letters[2])}>{letters[2]}</button>\n        <button onClick={() => handleButtonClick(letters[3])}>{letters[3]}</button>\n        <button onClick={() => handleButtonClick(letters[4])}>{letters[4]}</button>\n        <button onClick={() => handleButtonClick(letters[5])}>{letters[5]}</button>\n        <button onClick={() => handleButtonClick(letters[6])}>{letters[6]}</button>\n        <button onClick={fetchGameState}>New Game</button>\n        <p>{userInput}</p>\n        <button onClick={handleDeleteClick}>Delete</button>\n        <button onClick={handleGuessSubmission}>Submit Guess</button>\n        {/* <p>Current Guess: {userInput}</p> */}\n        <p>Points: {points}</p>\n        <p>Already Guessed: {alreadyGuessed.join(', ')}</p>\n\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}