{"ast":null,"code":"var _jsxFileName = \"/Users/lauren/Desktop/spell_game/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// Filename - App.js\n\n// Importing modules\nimport React, { useState, useEffect } from \"react\";\nimport Icon from './arrow.png';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction scoring(word) {\n  if (word.length == 4) {\n    return 1;\n  }\n  return word.length;\n}\nfunction totalPoints(lst) {\n  var points = 0;\n  for (var i = 0; i < lst.length; i++) {\n    points += scoring(lst[i]);\n  }\n  return points;\n}\nfunction App() {\n  _s();\n  const [letters, setLetters] = useState([]); // State to store the letters\n  const [correctInputs, setCorrectInputs] = useState([]); // State to store the correct inputs\n  const [lst, setLst] = useState([]); // State to store the special inputs\n  const [userInput, setUserInput] = useState(''); // State to store the user's input\n  const [alreadyGuessed, setAlreadyGuessed] = useState([]); // State to store the already guessed words\n  const [points, setPoints] = useState(0); // State to store the points\n  const [special_letter, setSpecialLetter] = useState('');\n  const [maxPoints, setMaxPoints] = useState(0);\n  const [inputColor, setInputColor] = useState('black');\n  const [pangramWords, setPangramWords] = useState([]);\n  const fetchGameState = () => {\n    fetch('/game_state').then(response => response.json()).then(data => {\n      setLetters(data.letters);\n      setCorrectInputs(data.correct_inputs);\n      setLst(data.lst);\n      setSpecialLetter(data.special_letter);\n      setUserInput('');\n      console.log('Special letter: ', data.special_letter);\n      console.log('pangrams: ', data.lst);\n    });\n    setPoints(0);\n    setAlreadyGuessed([]);\n    setMaxPoints(totalPoints(correctInputs));\n    console.log('max points: ', maxPoints);\n  };\n\n  // Fetch the letters from the server when the component mounts\n  useEffect(() => {\n    fetchGameState();\n  }, []);\n  const handleButtonClick = letter => {\n    setUserInput(userInput + letter);\n    const newUserInput = userInput + letter;\n    //console.log('userintput is:', newUserInput);\n    setUserInput(newUserInput);\n  };\n  useEffect(() => {\n    const handleKeyDown = event => {\n      // Check if the key is a letter\n      var pressed = event.key.toLowerCase();\n      if (pressed.length === 1 && pressed.match(/[a-z]/i)) {\n        // Update the userInput state\n        setUserInput(userInput + event.key);\n      } else if (event.key === 'Enter') {\n        handleGuessSubmission();\n      } else if (event.key === 'Backspace') {\n        handleDeleteClick();\n      }\n    };\n\n    // Add the event listener\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [userInput]); // Re-run the effect when `userInput` changes\n\n  // const handleIncorrectLetter = (event) => {\n  //   const newInput = event.target.value;\n  //   const lastChar = newInput[newInput.length - 1];\n\n  //   if (letters.includes(lastChar)) {\n  //       setInputColor('green');\n  //   } else {\n  //       setInputColor('gray');\n  //   }\n\n  //   setUserInput(newInput);\n  // };\n  // Function to handle delete button click\n  const handleDeleteClick = () => {\n    setUserInput(userInput.slice(0, -1));\n  };\n  const handleGuessSubmission = () => {\n    console.log('handling guess: ', userInput);\n    console.log('already guessed is: ', alreadyGuessed);\n    if (correctInputs.includes(userInput) && userInput.includes(special_letter)) {\n      if (alreadyGuessed.includes(userInput)) {\n        alert(\"Already Guessed\");\n      } else if (lst.includes(userInput)) {\n        alert(\"its a pangram!!!\");\n        var current = scoring(userInput);\n        setPoints(points + current);\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n        setPangramWords([...pangramWords, userInput]); // Add this line\n      } else {\n        alert(\"Great!\");\n        current = scoring(userInput);\n        setPoints(points + current);\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n      }\n    } else {\n      alert(\"Not a valid word!\");\n    }\n    setUserInput('');\n    // Update the state variable with the new guess\n  };\n  const handleShuffle = () => {\n    let shuffledLetters = [...letters];\n    for (let i = shuffledLetters.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledLetters[i], shuffledLetters[j]] = [shuffledLetters[j], shuffledLetters[i]];\n    }\n    setLetters(shuffledLetters); // This will trigger a re-render\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Spelling Bee!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Points: \", points]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-around'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: letters[0] === special_letter ? \"specialButton\" : \"myButton\",\n          onClick: () => handleButtonClick(letters[0]),\n          children: letters[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: letters[1] === special_letter ? \"specialButton\" : \"myButton\",\n          onClick: () => handleButtonClick(letters[1]),\n          children: letters[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: letters[2] === special_letter ? \"specialButton\" : \"myButton\",\n          onClick: () => handleButtonClick(letters[2]),\n          children: letters[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: letters[3] === special_letter ? \"specialButton\" : \"myButton\",\n          onClick: () => handleButtonClick(letters[3]),\n          children: letters[3]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: letters[4] === special_letter ? \"specialButton\" : \"myButton\",\n          onClick: () => handleButtonClick(letters[4]),\n          children: letters[4]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: letters[5] === special_letter ? \"specialButton\" : \"myButton\",\n          onClick: () => handleButtonClick(letters[5]),\n          children: letters[5]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: letters[6] === special_letter ? \"specialButton\" : \"myButton\",\n          onClick: () => handleButtonClick(letters[6]),\n          children: letters[6]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          background: 'transparent',\n          border: 'none',\n          borderBottom: '1px solid #000',\n          outline: 'none',\n          fontSize: '30px',\n          height: '30px',\n          caretColor: 'yellow'\n        },\n        type: \"text\",\n        placeholder: \"Type or Click\",\n        value: userInput\n        //onChange={handleIncorrectLetter} \n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteClick,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGuessSubmission,\n        children: \"Submit Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"shuffleButton\",\n        onClick: handleShuffle,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Icon,\n          alt: \"Shuffle Icon\",\n          style: {\n            width: '20px',\n            height: '20px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Already Guessed: \", alreadyGuessed.map(word => pangramWords.includes(word) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 43\n          }, this), \", \"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [word, \", \"]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Max Points: \", maxPoints]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchGameState,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"VwsFp8aX55w53li1mvZOCaTVmr0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Icon","jsxDEV","_jsxDEV","Fragment","_Fragment","scoring","word","length","totalPoints","lst","points","i","App","_s","letters","setLetters","correctInputs","setCorrectInputs","setLst","userInput","setUserInput","alreadyGuessed","setAlreadyGuessed","setPoints","special_letter","setSpecialLetter","maxPoints","setMaxPoints","inputColor","setInputColor","pangramWords","setPangramWords","fetchGameState","fetch","then","response","json","data","correct_inputs","console","log","handleButtonClick","letter","newUserInput","handleKeyDown","event","pressed","key","toLowerCase","match","handleGuessSubmission","handleDeleteClick","window","addEventListener","removeEventListener","slice","includes","alert","current","handleShuffle","shuffledLetters","j","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","onClick","background","border","borderBottom","outline","fontSize","height","caretColor","type","placeholder","value","src","alt","width","map","_c","$RefreshReg$"],"sources":["/Users/lauren/Desktop/spell_game/frontend/src/App.js"],"sourcesContent":["// Filename - App.js\n\n// Importing modules\nimport React, { useState, useEffect } from \"react\";\nimport Icon from './arrow.png';\nimport \"./App.css\";\n\nfunction scoring(word) {\n  if (word.length == 4 ) {\n    return 1\n  }\n  return word.length\n}\n\nfunction totalPoints (lst) {\n  var points = 0\n  for ( var i = 0; i < lst.length ; i++ ) {\n    points += scoring(lst[i])\n  }\n  return points\n}\n\nfunction App() {\n\n\n  const [letters, setLetters] = useState([]); // State to store the letters\n  const [correctInputs, setCorrectInputs] = useState([]); // State to store the correct inputs\n  const [lst, setLst] = useState([]); // State to store the special inputs\n  const [userInput, setUserInput] = useState(''); // State to store the user's input\n  const [alreadyGuessed, setAlreadyGuessed] = useState([]); // State to store the already guessed words\n  const [points, setPoints] = useState(0); // State to store the points\n  const [special_letter, setSpecialLetter] = useState('')\n  const [maxPoints, setMaxPoints] = useState(0)\n  const [inputColor, setInputColor] = useState('black');\n  const [pangramWords, setPangramWords] = useState([]);\n\n\n\n  const fetchGameState = () => {\n    fetch('/game_state')\n      .then(response => response.json())\n      .then(data => {\n        setLetters(data.letters);\n        setCorrectInputs(data.correct_inputs);\n        setLst(data.lst);\n        setSpecialLetter(data.special_letter)\n        setUserInput('')\n        console.log('Special letter: ', data.special_letter);\n        console.log('pangrams: ', data.lst);\n\n      });\n    setPoints(0)\n    setAlreadyGuessed([])\n    setMaxPoints(totalPoints(correctInputs))\n    console.log('max points: ', maxPoints)\n  };\n\n  // Fetch the letters from the server when the component mounts\n  useEffect(() => {\n    fetchGameState();\n  }, []);\n\n  const handleButtonClick = (letter) => {\n    setUserInput(userInput + letter)\n    const newUserInput = userInput + letter;\n    //console.log('userintput is:', newUserInput);\n    setUserInput(newUserInput);\n  };\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      // Check if the key is a letter\n      var pressed = event.key.toLowerCase()\n      if (pressed.length === 1 && pressed.match(/[a-z]/i)) {\n        // Update the userInput state\n        setUserInput(userInput + event.key);\n      }\n\n      else if (event.key === 'Enter') {\n        handleGuessSubmission()\n      }\n      \n      else if (event.key === 'Backspace') {\n        handleDeleteClick()\n      }\n    };\n\n    // Add the event listener\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [userInput]); // Re-run the effect when `userInput` changes\n\n  // const handleIncorrectLetter = (event) => {\n  //   const newInput = event.target.value;\n  //   const lastChar = newInput[newInput.length - 1];\n\n  //   if (letters.includes(lastChar)) {\n  //       setInputColor('green');\n  //   } else {\n  //       setInputColor('gray');\n  //   }\n\n  //   setUserInput(newInput);\n  // };\n  // Function to handle delete button click\n  const handleDeleteClick = () => {\n    setUserInput(userInput.slice(0, -1));\n  };\n\n  const handleGuessSubmission = () => {\n    console.log('handling guess: ', userInput)\n    console.log('already guessed is: ', alreadyGuessed)\n    if (correctInputs.includes(userInput) &&  userInput.includes(special_letter) ) {\n      if (alreadyGuessed.includes(userInput) ) {\n        alert(\"Already Guessed\");\n      } else if (lst.includes(userInput)){\n        alert(\"its a pangram!!!\");\n        var current = scoring(userInput)\n        setPoints(points+current)\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n        setPangramWords([...pangramWords, userInput]); // Add this line\n\n      }\n      else {\n        alert(\"Great!\");\n        current = scoring(userInput)\n        setPoints(points+current)\n        setAlreadyGuessed([...alreadyGuessed, userInput]);\n        \n      }\n    } else {\n      alert(\"Not a valid word!\");\n    }\n    setUserInput('');\n    // Update the state variable with the new guess\n  };\n\n  const handleShuffle = () => {\n    let shuffledLetters = [...letters];\n    for (let i = shuffledLetters.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffledLetters[i], shuffledLetters[j]] = [shuffledLetters[j], shuffledLetters[i]];\n    }\n    setLetters(shuffledLetters); // This will trigger a re-render\n  };\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>Spelling Bee!!</h1>\n\n        <p>Points: {points}</p>\n        \n        <div style={{display: 'flex', justifyContent: 'space-around'}}>\n        <button className={letters[0] === special_letter ? \"specialButton\" : \"myButton\"} onClick={() => handleButtonClick(letters[0])}>{letters[0]}</button>\n        <button className={letters[1] === special_letter ? \"specialButton\" : \"myButton\"} onClick={() => handleButtonClick(letters[1])}>{letters[1]}</button>\n        <button className={letters[2] === special_letter ? \"specialButton\" : \"myButton\"} onClick={() => handleButtonClick(letters[2])}>{letters[2]}</button>\n        <button className={letters[3] === special_letter ? \"specialButton\" : \"myButton\"} onClick={() => handleButtonClick(letters[3])}>{letters[3]}</button>\n        <button className={letters[4] === special_letter ? \"specialButton\" : \"myButton\"} onClick={() => handleButtonClick(letters[4])}>{letters[4]}</button>\n        <button className={letters[5] === special_letter ? \"specialButton\" : \"myButton\"} onClick={() => handleButtonClick(letters[5])}>{letters[5]}</button>\n        <button className={letters[6] === special_letter ? \"specialButton\" : \"myButton\"} onClick={() => handleButtonClick(letters[6])}>{letters[6]}</button>\n        </div>\n\n        {/* <p>{userInput}</p> */}\n        <input \n          style={{\n            background: 'transparent', \n            border: 'none', \n            borderBottom: '1px solid #000', \n            outline: 'none',\n            fontSize: '30px', \n            height: '30px', \n            caretColor: 'yellow' \n          }} \n          type=\"text\" \n          placeholder=\"Type or Click\"\n          value={userInput} \n          //onChange={handleIncorrectLetter} \n        />\n\n\n        <button onClick={handleDeleteClick}>Delete</button>\n        <button onClick={handleGuessSubmission}>Submit Guess</button>\n        <button className = {\"shuffleButton\"} onClick={handleShuffle}>\n          <img src={Icon} alt=\"Shuffle Icon\" style={{ width: '20px', height: '20px' }}/>\n        </button>\n\n        {/* <p>Already Guessed: {alreadyGuessed.join(', ')}</p> */}\n        {/* <p>Already Guessed: {alreadyGuessed.map(word => pangramWords.includes(word) ? <b>{word}</b> : word).join(', ')}</p> */}\n        <p>Already Guessed: {alreadyGuessed.map(word => \n          pangramWords.includes(word) ? <><b>{word}</b>, </> : <>{word}, </>\n)       }</p>\n\n        <p>Max Points: {maxPoints}</p>\n        <button onClick={fetchGameState}>New Game</button>\n\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}